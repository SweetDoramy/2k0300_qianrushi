用于存放用户代码

关于编码器
  *         从左往右看，车轮逆时针，编码器顺时针，车子正跑，我这里认为是电机正转
  *         而两个编码器对称排布，所以跑起来数值上应该是一正一负
  *         因为久久派采集通道引脚未引出，所以只有脉宽捕获的功能，只能用T法测速。
  *                 即用计时器或者秒表，用时间除以长度得出实际速度m/s
  *         实际测量系数大概为0.03
  *         大约10%占空比编码器均值为115    355       13587
  *         大约20%占空比编码器均值为510    325       3064
  *         大约30%占空比编码器均值为875    355       1786
  *         大约40%占空比编码器均值为1230   340       1270
  *         大约50%占空比编码器均值为1570             995
  *         那现在就10+x对应190+35x的编码器数值，x为以10为基础的占空比

  * 编码器只能T法测速，然后捕获脉宽
   T 法是测量编码器两个脉冲之间的时间间隔来计算转速，也被称为周期法。实际使用中通过一个高频时钟脉冲的个数 M2 来计算编码器两个脉冲之间的时间间隔。
   车模从动轮68，主动轮16，编码器30     ——> 齿数
   编码器旋转一周是1024个脉冲





  关于PID
  *         能不能用串级PID来控制舵机转角呢？就是根据图像处理传回来的要转弯角度来控制舵机
  *         从加速度、速度、位置的关系上实现精准控制

  关于舵机
  *         目前范围是90到120，中值在105左右
  *         最终输出占空比就是（duty最大值）* 百分比，百分比即角度与高电平时间的对应值，高电平在一个周期中的占比即占空比
  *         舵机对应的 0-180 活动角度对应 控制脉冲的 0.5ms-2.5ms 高电平，而频率决定一个周期多长，不决定什么
  *         修改了舵机频率，改成了150.频率过快响应快但是稳定性会变差，尤其现在摄像头放前面了。

  关于陀螺仪
  *         车子向右转陀螺仪是负值，现在又换回yaw一圈36了。




  DoubleBuffer` 是一个模板化类，允许灵活管理不同类型的数据。通过两个缓冲区和一个原子变量 `currentBuffer` 来指示当前写入的缓冲区索引。
  `write` 方法用于写入数据到非当前缓冲区，并切换缓冲区索引；`read` 方法用于读取当前缓冲区的数据。



  注意！！！两个拨码初始状态拨到右边